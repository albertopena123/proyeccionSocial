generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
}

enum ModuleType {
  CORE // Sistema base
  FEATURE // Funcionalidad
  INTEGRATION // Integraciones externas
  CUSTOM // Personalizado
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  EXPORT
}

// ==================== MODELOS DE USUARIO ====================

model User {
  id            String    @id @default(cuid())
  email         String    @unique // Correo institucional (nombre.unamad.edu.pe)
  personalEmail String? // Correo personal adicional
  password      String?   @db.Text
  name          String? // Nombre completo
  image         String?
  emailVerified DateTime?

  // Datos personales
  documentType   String? // Tipo de documento: DNI, CE (Carnet de Extranjería), PASAPORTE
  documentNumber String? @unique // Número de documento
  sex            String? // Sexo: M (Masculino), F (Femenino)

  // Datos académicos
  studentCode    String? @unique // Código de estudiante
  dni            String? @unique // DNI (LEGACY: usar documentNumber en su lugar)
  faculty        String? // Facultad
  career         String? // Carrera
  careerCode     String? // Código de carrera
  enrollmentDate String? // Periodo de ingreso (ej: "2013-1", "2018-2")

  // Estado de la cuenta
  isActive          Boolean @default(false) // Inactivo hasta verificación
  verificationToken String? // Token para verificación de email

  // Recuperación de contraseña
  resetPasswordToken   String? // Token para resetear contraseña
  resetPasswordExpires DateTime? // Expiración del token

  // OAuth
  accounts Account[]
  sessions Session[]

  // Roles y permisos
  role        UserRole         @default(USER)
  permissions UserPermission[]

  // Preferencias
  preferences UserPreferences?

  // Documentos
  constanciasCreadas    Constancia[] @relation("ConstanciasCreadas")
  constanciasAprobadas  Constancia[] @relation("ConstanciasAprobadas")
  resolucionesCreadas   Resolucion[] @relation("ResolucionesCreadas")
  resolucionesAprobadas Resolucion[] @relation("ResolucionesAprobadas")

  // Auditoría
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([personalEmail])
  @@index([studentCode])
  @@index([dni])
  @@index([documentNumber])
  @@index([role])
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique

  // Tema
  theme  String @default("system") // "light", "dark", "system"
  radius Float  @default(0.5) // 0, 0.3, 0.5, 0.75, 1.0

  // Colores personalizados (opcional)
  primaryColor String? // hex color
  accentColor  String? // hex color

  // Otras preferencias
  fontSize      String  @default("default") // "sm", "default", "lg"
  reducedMotion Boolean @default(false)
  highContrast  Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
}

// ==================== MODELOS DE AUTENTICACIÓN ====================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== SISTEMA DE MÓDULOS ====================

model Module {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  icon        String? // Icono del módulo
  type        ModuleType @default(FEATURE)
  isActive    Boolean    @default(true)
  order       Int        @default(0)

  // Configuración
  config Json? // Configuración específica del módulo
  routes Json? // Rutas del módulo

  // Relaciones
  submodules  Submodule[]
  permissions Permission[]

  // Metadata
  version String  @default("1.0.0")
  author  String?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  MenuItem       MenuItem[]
  ModuleSettings ModuleSettings?

  @@index([slug])
  @@index([isActive])
}

model Submodule {
  id          String  @id @default(cuid())
  moduleId    String
  name        String
  slug        String
  description String?
  icon        String?
  isActive    Boolean @default(true)
  order       Int     @default(0)

  // Configuración
  config Json? // Configuración específica
  routes Json? // Rutas del submódulo

  // Relaciones
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  permissions Permission[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  MenuItem  MenuItem[]

  @@unique([moduleId, slug])
  @@index([moduleId])
  @@index([isActive])
}

// ==================== SISTEMA DE PERMISOS ====================

model Permission {
  id          String  @id @default(cuid())
  name        String
  code        String  @unique // Ej: "posts.create", "users.delete"
  description String?

  // Relación con módulo o submódulo
  moduleId    String?
  submoduleId String?

  module    Module?    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submodule Submodule? @relation(fields: [submoduleId], references: [id], onDelete: Cascade)

  // Acciones permitidas
  actions PermissionAction[]

  // Usuarios con este permiso
  users UserPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([moduleId])
  @@index([submoduleId])
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Acciones específicas que tiene el usuario para este permiso
  actions PermissionAction[] @default([READ])

  // Permisos temporales
  expiresAt DateTime?

  grantedAt DateTime @default(now())
  grantedBy String? // ID del admin que otorgó el permiso

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([expiresAt])
}

// ==================== SISTEMA DE NAVEGACIÓN ====================

model MenuItem {
  id          String  @id @default(cuid())
  moduleId    String?
  submoduleId String?
  parentId    String? // Para menús anidados

  title     String
  icon      String?
  path      String?
  order     Int     @default(0)
  isVisible Boolean @default(true)

  // Permisos requeridos
  requiredPermissions String[] // Array de códigos de permisos

  parent   MenuItem?  @relation("MenuHierarchy", fields: [parentId], references: [id])
  children MenuItem[] @relation("MenuHierarchy")

  module    Module?    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submodule Submodule? @relation(fields: [submoduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([parentId])
  @@index([order])
}

// ==================== AUDITORÍA ====================

model AuditLog {
  id       String  @id @default(cuid())
  userId   String?
  action   String // "module.created", "permission.granted", etc
  entity   String // Tabla afectada
  entityId String

  changes  Json? // Antes/después
  metadata Json? // IP, user agent, etc

  timestamp DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
  @@index([timestamp])
}

// ==================== CONFIGURACIÓN DE MÓDULOS ====================

model ModuleSettings {
  id       String @id @default(cuid())
  moduleId String @unique

  // Configuraciones específicas
  features Json @default("{}") // Features habilitadas
  limits   Json @default("{}") // Límites (ej: max users, storage)
  styles   Json @default("{}") // Personalización visual

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
}

// ==================== MÓDULO DE DOCUMENTOS ====================

enum DocumentStatus {
  PENDIENTE
  APROBADO
  RECHAZADO
  ANULADO
}

enum DocumentType {
  CONSTANCIA
  RESOLUCION
  UNAMAD
  DPSEC
}

enum TipoResolucion {
  APROBACION_PROYECTO
  APROBACION_INFORME_FINAL
}

enum ModalidadResolucion {
  DOCENTES
  ESTUDIANTES
  VOLUNTARIADO
  ACTIVIDAD
  EXTERNOS // <-- AGREGAR ESTA LÍNEA
}

// Modelo para Constancias
model Constancia {
  id String @id @default(cuid())

  // Datos del estudiante
  studentCode String // Código de estudiante
  fullName    String // Nombre completo
  dni         String // DNI

  // Datos del documento
  constanciaNumber String  @unique // Número de constancia
  year             Int // Año
  observation      String? @db.Text // Observaciones

  // Archivo
  fileName     String? // Nombre del archivo
  fileUrl      String? // URL del archivo
  fileSize     Int? // Tamaño en bytes
  fileMimeType String? // Tipo MIME del archivo

  // Estado y tipo
  status DocumentStatus @default(PENDIENTE)
  type   DocumentType   @default(CONSTANCIA)

  // Relaciones
  createdById String // Usuario que creó la constancia
  createdBy   User   @relation("ConstanciasCreadas", fields: [createdById], references: [id])

  approvedById String? // Usuario que aprobó (si aplica)
  approvedBy   User?   @relation("ConstanciasAprobadas", fields: [approvedById], references: [id])

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime? // Fecha de aprobación

  // Índices para búsquedas
  @@index([studentCode])
  @@index([dni])
  @@index([constanciaNumber])
  @@index([year])
  @@index([status])
  @@index([createdById])
  @@index([createdAt])
}

// ==================== MÓDULO DE RESOLUCIONES ====================

// Modelo para Facultades
model Facultad {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  codigo    String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  departamentos Departamento[]
  resoluciones  Resolucion[]

  @@index([nombre])
}

// Modelo para Departamentos
model Departamento {
  id         Int      @id @default(autoincrement())
  nombre     String
  codigo     String?
  facultadId Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  facultad     Facultad     @relation(fields: [facultadId], references: [id])
  resoluciones Resolucion[]

  @@unique([nombre, facultadId])
  @@index([facultadId])
}

// Modelo para Resoluciones
model Resolucion {
  id String @id @default(cuid())

  // Tipo y número
  tipoResolucion   TipoResolucion // APROBACION_PROYECTO o APROBACION_INFORME_FINAL
  numeroResolucion String         @unique
  fechaResolucion  DateTime

  // Modalidad y financiamiento
  modalidad    ModalidadResolucion // DOCENTES, ESTUDIANTES, VOLUNTARIADO, ACTIVIDAD
  esFinanciado Boolean             @default(false)
  monto        Decimal?            @db.Decimal(10, 2) // Solo si esFinanciado = true

  // Datos del asesor
  dniAsesor    String
  nombreAsesor String

  // Datos del proyecto
  tituloProyecto String @db.Text

  // Relaciones con facultad y departamento
  facultadId     Int
  departamentoId Int

  // Archivo
  fileName     String? // Nombre del archivo
  fileUrl      String? // URL del archivo
  fileSize     Int? // Tamaño en bytes
  fileMimeType String? // Tipo MIME del archivo

  // Estado
  status DocumentStatus @default(PENDIENTE)

  // Relaciones
  facultad     Facultad               @relation(fields: [facultadId], references: [id])
  departamento Departamento           @relation(fields: [departamentoId], references: [id])
  docentes     DocenteResolucion[]
  estudiantes  EstudianteResolucion[]

  createdById String // Usuario que creó la resolución
  createdBy   User   @relation("ResolucionesCreadas", fields: [createdById], references: [id])

  approvedById String? // Usuario que aprobó (si aplica)
  approvedBy   User?               @relation("ResolucionesAprobadas", fields: [approvedById], references: [id])
  archivos     ArchivoResolucion[] // Una resolución puede tener múltiples archivos

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime? // Fecha de aprobación

  // Índices para búsquedas
  @@index([numeroResolucion])
  @@index([tipoResolucion])
  @@index([modalidad])
  @@index([fechaResolucion])
  @@index([status])
  @@index([facultadId])
  @@index([departamentoId])
  @@index([createdById])
  @@index([createdAt])
}

// Modelo para docentes participantes en resoluciones
model DocenteResolucion {
  id           String  @id @default(cuid())
  resolucionId String
  dni          String // DNI del docente
  nombres      String // Nombres completos
  apellidos    String // Apellidos completos
  email        String? // Email institucional
  facultad     String? // Facultad del docente

  // Relación
  resolucion Resolucion @relation(fields: [resolucionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([resolucionId, dni]) // Un docente no puede estar duplicado en la misma resolución
  @@index([resolucionId])
}

// Modelo para estudiantes participantes en resoluciones
model EstudianteResolucion {
  id           String @id @default(cuid())
  resolucionId String
  dni          String // DNI del estudiante
  codigo       String // Código del estudiante
  nombres      String // Nombres completos
  apellidos    String // Apellidos completos

  // Relación
  resolucion Resolucion @relation(fields: [resolucionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([resolucionId, codigo]) // Un estudiante no puede estar duplicado en la misma resolución
  @@index([resolucionId])
}

model ArchivoResolucion {
  id           String  @id @default(cuid())
  resolucionId String
  fileName     String
  fileUrl      String
  fileSize     Int?
  fileMimeType String?
  tipo         String? // 'resolucion', 'acta', 'anexo', etc.

  resolucion Resolucion @relation(fields: [resolucionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([resolucionId])
}
